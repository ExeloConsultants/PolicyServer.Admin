// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using PolicyServer.EntityFramework.DbContexts;
using System;

namespace PolicyServer.Host.Migrations
{
    [DbContext(typeof(ConfigurationDbContext))]
    partial class ConfigurationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026");

            modelBuilder.Entity("PolicyServer.EntityFramework.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200);

                    b.Property<bool>("Enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("PolicyServer.EntityFramework.Entities.PermissionRole", b =>
                {
                    b.Property<int>("PermissionId");

                    b.Property<int>("RoleId");

                    b.HasKey("PermissionId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("PermissionRole");
                });

            modelBuilder.Entity("PolicyServer.EntityFramework.Entities.Policy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200);

                    b.Property<bool>("Enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Policy");
                });

            modelBuilder.Entity("PolicyServer.EntityFramework.Entities.PolicyPermission", b =>
                {
                    b.Property<int>("PolicyId");

                    b.Property<int>("PermissionId");

                    b.HasKey("PolicyId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("PolicyPermission");
                });

            modelBuilder.Entity("PolicyServer.EntityFramework.Entities.PolicyRole", b =>
                {
                    b.Property<int>("PolicyId");

                    b.Property<int>("RoleId");

                    b.HasKey("PolicyId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("PolicyRole");
                });

            modelBuilder.Entity("PolicyServer.EntityFramework.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200);

                    b.Property<bool>("Enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Role");
                });

            modelBuilder.Entity("PolicyServer.EntityFramework.Entities.RoleSubject", b =>
                {
                    b.Property<int>("RoleId");

                    b.Property<string>("Subject");

                    b.HasKey("RoleId", "Subject");

                    b.ToTable("RoleSubject");
                });

            modelBuilder.Entity("PolicyServer.EntityFramework.Entities.PermissionRole", b =>
                {
                    b.HasOne("PolicyServer.EntityFramework.Entities.Permission", "Permission")
                        .WithMany("PermissionRoles")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PolicyServer.EntityFramework.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PolicyServer.EntityFramework.Entities.PolicyPermission", b =>
                {
                    b.HasOne("PolicyServer.EntityFramework.Entities.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PolicyServer.EntityFramework.Entities.Policy", "Policy")
                        .WithMany("PolicyPermissions")
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PolicyServer.EntityFramework.Entities.PolicyRole", b =>
                {
                    b.HasOne("PolicyServer.EntityFramework.Entities.Policy", "Policy")
                        .WithMany("PolicyRoles")
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PolicyServer.EntityFramework.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PolicyServer.EntityFramework.Entities.RoleSubject", b =>
                {
                    b.HasOne("PolicyServer.EntityFramework.Entities.Role", "Role")
                        .WithMany("RoleSubjects")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
